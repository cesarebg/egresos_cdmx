p <- gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%
ggplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
scale_y_continuous(trans = "log2")
p + geom_boxplot(aes(region, dollars_per_day, fill = continent)) +
facet_grid(year~.)
# Hard to compare so we need to ease the comparisons
# Instead of faceting, we ask ggplot plot to color or fill the box block
# depending on the year
p + geom_boxplot(aes(region, dollars_per_day, fill = factor(year)))
# DENSITY PLOTS
# Connfirms that the gap has closed
# Poor countries become richer instead of rich countries became poorer?
# Because of the size of each groups, there is a discrepancy between the number of
# rich and poor countries
gapminder %>%
filter(year == past_year & country %in% country_list) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>% group_by(group) %>%
summarize(n=n()) %>% knitr::kable()
# If we overlay the two densities, the default is to have the area represented
# by each distribution add up to 1 regardless of the size of each group
# What may show the incorrect notion that there are the same number of countries
# in each group
# We need to access to computed variables with the geom_density function
# We multiply the areas of the densities be proportional to the size of the groups, to make them
# proportional, using the parameter count in geom_density
# We use .. to access variables to put count in the y axis
# aes(x = dollars_per_day, y = ..count..)
# x -> dollars_per_day
# y -> ..count..
p <- gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
ggplot(aes(dollars_per_day, y = ..count.., fill = group)) +
scale_x_continuous(trans = "log2")
p + geom_density(alpha = 0.2) + facet_grid(year ~ .)
# To make them smoother
p + geom_density(alpha = 0.2, bw= 0.75) + facet_grid(year ~ .)
# A third mode appears of the countries that most closed the gap
# With case_when we can define groups
# We use the dotplaceholder to access data
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "West",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
TRUE ~ "Others"))
# Now we turn it to a factor
gapminder <- gapminder %>%
mutate(group = factor(group, levels = c("Others", "Latin America",
"East Asia", "Sub-Saharan Africa",
"West")))
p <- gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
mutate(group = case_when(
.$region %in% west ~ "West",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
TRUE ~ "Others")) %>%
ggplot(aes(dollars_per_day, y = ..count.., fill = group)) +
scale_x_continuous(trans = "log2")
p + geom_density(alpha = 0.2, bw = 0.75, position = "stack") +
facet_grid(year ~ .)
# Smoothing with weight argument
p <- gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
mutate(weight = population/sum(population*2), group = case_when(
.$region %in% west ~ "West",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
TRUE ~ "Others")) %>%
ggplot(aes(dollars_per_day, y = ..count.., fill = group, weight = weight)) +
scale_x_continuous(trans = "log2")
p + geom_density(alpha = 0.2, bw = 0.75, position = "stack") +
facet_grid(year ~ .)
# ECOLOGICAL FALLACY
# Variability within groups
# Function logit_transformation
# country child survival rates vs. average income
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "The West",
.$region %in% "Northern Africa" ~ "Northern Africa",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% == "Southern Asia"~ "Southern Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
.$region %in% c("Melanesia", "Micronesia", "Polynesia") ~
"Pacific Islands"))
# Compute for each region
surv_income <- gapminder %>%
filter(year %in% present_year & !is.na(gdp) & !is.na(infant.mortality) & !is.na(group)) %>%
group_by(group) %>%
summarize(income = sum(gdp)/sum(population)/365,
infant_survival_rate = 1-sum(infant_mortality/1000*population)/sum(population))
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "The West",
.$region %in% "Northern Africa" ~ "Northern Africa",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% == "Southern Asia"~ "Southern Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
.$region %in% c("Melanesia", "Micronesia", "Polynesia") ~
"Pacific Islands"))
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "The West",
.$region %in% "Northern Africa" ~ "Northern Africa",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% == "Southern Asia"~ "Southern Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
.$region %in% c("Melanesia", "Micronesia", "Polynesia") ~
"Pacific Islands")
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "The West",
.$region %in% "Northern Africa" ~ "Northern Africa",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% == "Southern Asia"~ "Southern Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
.$region %in% c("Melanesia", "Micronesia", "Polynesia") ~
"Pacific Islands"))
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "The West",
.$region %in% "Northern Africa" ~ "Northern Africa",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% == "Southern Asia"~ "Southern Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~
"Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~
"Sub-Saharan Africa",
.$region %in% c("Melanesia", "Micronesia", "Polynesia") ~
"Pacific Islands"))
install.packages(c("ggplot2","dplyr"))
install.packages(c("ggplot2", "dplyr"))
install.packages(c("ggplot2", "dplyr"))
install.packages(c("ggplot2", "dplyr"))
install.packages(c("ggplot2", "dplyr"))
install.packages(c("ggplot2", "dplyr"))
install.packages("tidyverse")
install.packages(c("dplyr","ggplot2‚Äù)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
paste(number, suit)
number <- Three
suit <- "Hearts"
paste(number, suit)
number <- Three
suit <- "Hearts"
paste(number, suit)
number <- Three
number <- "Three"
suit <- "Hearts"
paste(number, suit)
paste(letters[1:5], as.character(1:5))
expand.grid(pants = c("blue", "black"), shirt = c("white", "grey", "plaid"))
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
deck <- expand.grid(number=numbers, suit=suits)
deck <- paste(deck$number, deck$suit)
deck
kings <- paste("King", suits)
mean(deck %in% kings)
deck %in% kings
library(gtools)
install.packages(gtools)
library(gtools)
permutations(5,2)
install.packages("gtools")
library(gtools)
permutations(5,2)
all_phone_numbers <- permutations(10, 7, v = 0:9)
n <- nrow(all_phone_numbers)
index <- sample(n, 5)
all_phone_numbers[index,]
all_phone_numbers
max.print(all_phone_numbers)
print(all_phone_numbers)
print(all_phone_numbers, max)
library(rgdal)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
pw <- {
"UpO.4nPo$+45"
}
con <- dbConnect("PostgreSQL", dbname = "adip",
host = "187.141.35.61", port = 5432,
user = "oscarf", password = pw)
rm(pw)
data <- dbGetQuery(con, "SELECT * from sis.pre_pgj where id_delito_general = '11'")
library(RPostgreSQL)
library(postGIStools)
pw <- {
"UpO.4nPo$+45"
}
con <- dbConnect("PostgreSQL", dbname = "adip",
host = "187.141.35.61", port = 5432,
user = "oscarf", password = pw)
rm(pw)
data <- dbGetQuery(con, "SELECT * from sis.pre_pgj where id_delito_general = '11'")
library(HistData)
library(ggplot2)
beta1 = seq(0, 1, len=nrow(galton_heights))
beta1 = seq(0, 1, len=nrow(galton_heights))
data("GaltonFamilies")
galton_heights <- GaltonFamilies %>%
filter(childNum == 1 & gender == "male") %>%
select(father, childHeight) %>%
rename(son = childHeight)
results <- data.frame(beta1 = beta1,
rss = sapply(beta1, rss, beta0 = 25))
library(Lehman)
install.packages("Lehman")
library(Lahman)
Teams
names(Teams)
?Teams
?Teams
?Teams
fit <- lm(BB ~ HR, data = Teams)
fit
fit <- lm(R/G ~ BB, HR, data = Teams)
fit
fit <- lm(R ~ BB, HR, data = Teams)
fit
fit <- lm(R ~ HR, BB, data = Teams)
fit
fit <- lm(R/G ~ HR/G, BB/G, data = Teams)
fit
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(R_per_game = R/G, HR_per_game = HR/G, BB_per_game = BB / G)
library(dplyr)
names(Teams)
?Teams
Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(R_per_game = R/G, HR_per_game = HR/G, BB_per_game = BB / G)
Teams <- Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(R_per_game = R/G, HR_per_game = HR/G, BB_per_game = BB / G)
fit <- lm(R_per_game ~ BB_per_game, HR_per_game, data = Teams)
fit
View(Teams)
View(Teams)
fit <- lm(R_per_game ~ HR_per_game, data = Teams)
fit
?lm
fit <- lm(R_per_game ~ HR, BB, data = Teams)
fit
fit <- lm(R_per_game ~ HR_per_game, BB_per_game, data = Teams)
fit
fit <- lm(R_per_game ~ BB_per_game, HR_per_game, data = Teams)
fit
HR_per_game
fit <- lm(R_per_game ~ HR_per_game, BB_per_game, data = Teams)
fit
fit <- lm(R_per_game ~ BB_per_game, data = Teams)
fit
fit <- lm(R_per_game ~ BB_per_game, HR_per_game, data = Teams)
fit
fit <- lm(BB_per_game ~ HR_per_game, data = Teams)
fit
fit <- lm(HR_per_game ~ BB_per_game, data = Teams)
fit
fit <- lm(HR ~ BB, data = Teams)
fit
fit <- lm(R_per_game ~ HR, BB, data = Teams)
fit
fit <- lm(R_per_game ~ BB, HR, data = Teams)
fit
library(Lahman)
library(dplyr)
names(Teams)
?Teams
?lm
Teams <- Teams %>% filter(yearID %in% 1961:2001) %>%
mutate(R_per_game = R/G, HR_per_game = HR/G, BB_per_game = BB/G)
fit <- lm(R_per_game ~ BB + HR, data = Teams)
fit
fit <- lm(R_per_game ~ BB + HR, data = Teams)
fit
summary(fit)
View(Teams)
View(Teams)
fit <- lm(R_per_game ~ BB_per_game + HR_per_game, data = Teams)
fit
summary(fit)
contributors()
beads <- rep (c("red", "blue"), times = c(2,3))
beads
sample(beads, 1)
B <- 100000
events <- replicate(B, sample(beads, 1))
events
B <- 1000000000
events <- replicate(B, sample(beads, 1))
View(events)
B <- 1000000
events <- replicate(B, sample(beads, 1))
beads <- rep (c("red", "blue"), times = c(2,3))
beads
sample(beads, 1)
B <- 1000000
events <- replicate(B, sample(beads, 1))
events
tab <- table(events)
tab
prop.table(tab)
sample(beads, 5)
sample(beads, 5)
sample(beads, 5)
events <- sample(beads, B, replace = TRUE)
prop.table(table(events))
sample(beads, 5)
sample(beads, 5)
sample(beads, 5)
events <- sample(beads, B, replace = TRUE)
prop.table(table(events))
beads <- rep (c("red", "blue"), times = c(2,3))
beads
sample(beads, 5)
sample(beads, 5)
sample(beads, 10)
sample(beads, 1)
sample(beads, 2)
B <- 10000
events <- replicate(B, sample(beads, 1))
events
tab <- table(events)
tab
prop.table(tab)
sample(beads, 5)
sample(beads, 5)
sample(beads, 5)
events <- sample(beads, B, replace = TRUE)
prop.table(table(events))
x <- sample(beads, 5)
x[2:5]
# Pr(Card 2 is a king | Card 1 is a king) = 3/51
# But when two events, like A and B are independent
# But when two events, like A and B are independent
# we have the following equation:
# But when two events, like A and B are independent
# we have the following equation:
# Pr(A | B) = Pr(A)
# But when two events, like A and B are independent
# we have the following equation:
# Pr(A | B) = Pr(A)
# "The probability of A, given B is equal to the
# But when two events, like A and B are independent
# we have the following equation:
# Pr(A | B) = Pr(A)
# "The probability of A, given B is equal to the
# probability of A, it doesn't matter what B is.
# To know the probability of two events, A and B, we can
# To know the probability of two events, A and B, we can
# use the multiplication rule.
# In Blackjack, if we get an ace, calculate the probability of
# Multiplicative rule for more than two events:
# Multiplicative rule for more than two events:
# "The probability of A and B is equal to the probability of A
# Multiplicative rule for more than two events:
# "The probability of A and B is equal to the probability of A
# multiplied by the probability of B given that A already happened"
# With independent events, the multiplication becomes simpler
# Be careful of confusing independent events, and apply the
events <- sample(beads, B, replace = TRUE)
events
data(heights)
library(dslabs)
x <- heights %>% filter(sex == "Male") %>%
.$height
library(tidyverse)
1-F(70)
1 - pnorm(70.5, mean(x), sd(x))
# It is more useful for data analytic purposes to treat this outcome
plot(prop.table(table(x)), xlab = "a= Height in inches", ylab = "Pr(X =a")
F <- function(a) mean(x <= a)
data(heights)
x <- heights %>% filter(sex == "Male") %>%
.$height
library(dslabs)
library(tidyverse)
1-F(70)
plot(prop.table(table(x)), xlab = "a= Height in inches", ylab = "Pr(X =a")
1 - pnorm(70.5, mean(x), sd(x))
F <- function(a) mean(x <= a)
# Normal distribution is useful for approximating the proportion of
# However, the approximation is not that useful for other intervals
# We call this situation discretization, although the true hight
# We call this situation discretization, although the true hight
# distribution is continuous, the reported heights tend to be more
library(tidyverse)
library(dslabs)
data(heights)
x <- heights %>% filter(sex == "Male") %>%
.$height
F <- function(a) mean(x <= a)
1-F(70)
1 - pnorm(70.5, mean(x), sd(x))
plot(prop.table(table(x)), xlab = "a= Height in inches", ylab = "Pr(X =a")
# It is more useful for data analytic purposes to treat this outcome
# With continuous distributions, the probability of a singular value is
# Doesn't make sense to take in count a speficif number, and therefore
# Normal distribution is useful for approximating the proportion of
# However, the approximation is not that useful for other intervals
# We call this situation discretization, although the true hight
# We call this situation discretization, although the true hight
# distribution is continuous, the reported heights tend to be more
avg <- mean(x)
s< sd(x)
avg <- mean(x)
s <- sd(x)
1 - pnorm(76, avg, s)
x <- heights %>% filter(sex == "Male") %>% .$height
n <- length(x)
avg <- mean(x)
s<- sd(x)
simulated_heights <- rnorm(n, avg, s)
tallest <- replicate(B, {
simulated_data <- rnorm(800, avg, s)
max(simulated_data)
})
mean(tallest >= 7*12)
x <- seq(-4, 4, length.out = 100)
data.frame(x, f = dnorm(x)) %>%
ggplot(aes(x, f)) +
geom_lime()
# qnorm, quantiles
library(ggplot2)
x <- seq(-4, 4, length.out = 100)
data.frame(x, f = dnorm(x)) %>%
ggplot(aes(x, f)) +
geom_lime()
data.frame(x, f = dnorm(x)) %>%
ggplot(aes(x, f)) +
geom_line()
library(tidyverse)
library(dslabs)
data(heights)
x <- heights %>% filter(sex == "Male") %>%
.$height
F <- function(a) mean(x <= a)
1-F(70)
1 - pnorm(70.5, mean(x), sd(x))
plot(prop.table(table(x)), xlab = "a= Height in inches", ylab = "Pr(X =a")
avg <- mean(x)
s <- sd(x)
1 - pnorm(76, avg, s)
pnorm(76, avg, s)
pnorm(5, avg, s)
pnorm(76, avg, s)
# Assign a variable 'female_avg' as the average female height.
female_avg <- 64
# Assign a variable 'female_sd' as the standard deviation for female heights.
female_sd <- 3
pnorm(5, female_avg, female_sd)
pnorm(5, female_avg, female_sd)
pnorm(-5, female_avg, female_sd)
pnorm(78, female_avg, female_sd)
pnorm(60, female_avg, female_sd)
1- pnorm(60, female_avg, female_sd)
1 - pnorm(60, female_avg, female_sd)
plot(prop.table(table(x)), xlab = "a= Height in inches", ylab = "Pr(X =a")
?qnorm
setwd("~/SpiderOak Hive/ADIP/D3/d3_scatterplot")
data <- read.csv("egresos.csv")
rm(list = ls())
setwd("~/SpiderOak Hive/ADIP/D3/d3_scatterplot")
library(wordcloud)
library(tm)
library(dplyr)
library(xtable)
data <- read.csv("egresos.csv")
names(data)
data <- data %>%
spread(libertad, total)
library(tidyverse)
data <- data %>%
spread(libertad, total)
View(data)
View(data)
write.csv(data, "egresos_spread.csv")
data <- read.csv("egresos_spread.csv")
View(data)
View(data)
names(data)
